/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/controller/Controller.e.vm.java
 */
package kr.or.lx.rcic.modules.dataapi.controller;

import kr.or.lx.rcic.frmwrk.util.SimpleData;
import kr.or.lx.rcic.frmwrk.web.BaseController;
import kr.or.lx.rcic.modules.dataapi.entity.ApiProvdInfo;
import kr.or.lx.rcic.modules.dataapi.service.ApiProvdInfoService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;

import java.util.HashMap;
import java.util.Map;

/**
 *  API로 제공되는 정보를 관리한다.  */
@Controller
@Slf4j
@RequestMapping("/rcic")
public class ApiProvdInfoController extends BaseController {

    @Autowired
    private ApiProvdInfoService apiProvdInfoService;

    // api

    /**
     * 단건 조회
     */
    
    @RequestMapping("/apiProvdInfo/getApiProvdInfo/{id}")
    @ResponseBody
    public ApiProvdInfo getApiProvdInfo(HttpServletRequest request, 
    		@PathVariable(name = "id", required = true) String id
    		) throws Exception {
    	
    	Map<String, Object> params = new HashMap<String, Object>();
    	params.put("id", id);
        return apiProvdInfoService.getApiProvdInfo(params);
    }

    /**
     * 목록 조회
     */
    @RequestMapping("/apiProvdInfo/getApiProvdInfoList")
    @ResponseBody
    public Map<String, Object> getApiProvdInfoList(HttpServletRequest request) throws Exception {
        return apiProvdInfoService.getApiProvdInfoList(request);
    }

    /**
     * 등록
     */
    @PostMapping("/apiProvdInfo/insertApiProvdInfo")
    @ResponseBody
    public int insertApiProvdInfo(HttpServletRequest request, @RequestBody ApiProvdInfo apiProvdInfo) throws Exception {
        return apiProvdInfoService.saveApiProvdInfo(apiProvdInfo);
    }

    /**
     * 수정
     */
    @PostMapping("/apiProvdInfo/updateApiProvdInfo")
    @ResponseBody
    public int updateApiProvdInfo(HttpServletRequest request, @RequestBody ApiProvdInfo apiProvdInfo) throws Exception {
        return apiProvdInfoService.saveApiProvdInfo(apiProvdInfo);
    }

    /**
     * 동적 수정
     */
    @PostMapping("/apiProvdInfo/patchApiProvdInfo")
    @ResponseBody
    public int patchApiProvdInfo(HttpServletRequest request, @RequestBody ApiProvdInfo apiProvdInfo) throws Exception {
        return apiProvdInfoService.saveApiProvdInfo(apiProvdInfo);
    }

    /**
     * 삭제
     */
    @PostMapping("/apiProvdInfo/deleteApiProvdInfo")
    @ResponseBody
    public int deleteApiProvdInfo(HttpServletRequest request, @RequestBody ApiProvdInfo apiProvdInfo) throws Exception {
        return apiProvdInfoService.deleteApiProvdInfo(apiProvdInfo);
    }

    /**
    * 사용여부 변경
    * useYn 컬럼을 업데이트 한다.
    */
    @PostMapping("/apiProvdInfo/changeUseYnApiProvdInfo")
    @ResponseBody
    public int changeUseYnApiProvdInfo(HttpServletRequest request, @RequestBody ApiProvdInfo apiProvdInfo) throws Exception {
        return apiProvdInfoService.changeUseYnApiProvdInfo(apiProvdInfo);
    }
}
