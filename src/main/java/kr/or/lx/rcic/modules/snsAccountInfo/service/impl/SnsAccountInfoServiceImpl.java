/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/service/impl/ServiceImpl.e.vm.java
 */
package kr.or.lx.rcic.modules.snsAccountInfo.service.impl;

import kr.co.timosoft.util.PaginationUtil;
import kr.or.lx.rcic.egovframework.cmmn.util.EgovMessageSource;
import kr.or.lx.rcic.frmwrk.util.CmmnUtil;
import kr.or.lx.rcic.modules.snsAccountInfo.entity.SnsAccountInfo;
import kr.or.lx.rcic.modules.snsAccountInfo.mapper.SnsAccountInfoMapper;
import kr.or.lx.rcic.modules.snsAccountInfo.service.SnsAccountInfoService;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *  수집대상이 되는 SNS 트위터 계정정보를 관리한다.  */
@Service
@Slf4j
public class SnsAccountInfoServiceImpl implements SnsAccountInfoService {

    @Autowired
    private SnsAccountInfoMapper snsAccountInfoMapper;

    @Resource(name = "egovMessageSource")
    EgovMessageSource egovMessageSource;

    /**
     * 단건 조회
     */
    @Override
    public SnsAccountInfo getSnsAccountInfo(Map<String, Object> params) throws Exception {
        log.debug("params: {}", params.toString()); // log 사용
        return snsAccountInfoMapper.getSnsAccountInfo(params);
    }

    /**
     * 목록 조회
     */
    @Override
    public Map<String, Object> getSnsAccountInfoList(HttpServletRequest request) throws Exception {

        HashMap<String, Object> resultMap = new HashMap<String, Object>();
        HashMap<String, Object> retMap = new HashMap<String, Object>();
        resultMap.put("message", "success");
        String strParamList = CmmnUtil.deXss(CmmnUtil.checkNull(request.getParameter("paramList"), ""));
        if (strParamList.equals("")) {
            retMap.put("message", "failure");
            retMap.put("result", egovMessageSource.getMessage("_REQUIRED_MSG_REPEAT"));
            return retMap;
        }

        JSONArray paramList = JSONArray.fromObject(strParamList);
        HashMap<String, Object> param = new HashMap<String, Object>();
        param = CmmnUtil.convertJsonToObject(CmmnUtil.checkNull(paramList.getJSONObject(0), ""));

        int listCnt = param.get("listCnt") == null ? 10 : Integer.parseInt(String.valueOf(param.get("listCnt")));
        int currPage = param.get("currPage") == null ? 1 : Integer.parseInt(String.valueOf(param.get("currPage")));

        param.put("listCnt", listCnt);
        param.put("currPage", currPage);

        int cnt = snsAccountInfoMapper.selectSnsAccountInfoCnt(param);
        int maxPageCnt = PaginationUtil.maxPageCnt(cnt, listCnt);
        List<Map<String, Object>> list = snsAccountInfoMapper.selectSnsAccountInfoList(param);

        resultMap.put("maxPageCnt", maxPageCnt);
        resultMap.put("list", list);

        return resultMap;
    }

    /**
     * 저장
     */
    @Override
    @Transactional
    public int saveSnsAccountInfo(SnsAccountInfo snsAccountInfo) throws Exception {

        // 저장 권한 검사 등..

        if (snsAccountInfo.hasPk()) {
            // 수정
            return updateSnsAccountInfo(snsAccountInfo);
        } else {
            // 신규 등록
            return insertSnsAccountInfo(snsAccountInfo);
        }
    }

    /**
     * 등록
     */
    @Override
    @Transactional
    public int insertSnsAccountInfo(SnsAccountInfo snsAccountInfo) throws Exception {
        return snsAccountInfoMapper.insertSnsAccountInfo(snsAccountInfo);
    }

    /**
     * 수정
     */
    @Override
    @Transactional
    public int updateSnsAccountInfo(SnsAccountInfo snsAccountInfo) throws Exception {
        return snsAccountInfoMapper.updateSnsAccountInfo(snsAccountInfo);
    }

    /**
     * 동적 수정
     */
    @Override
    @Transactional
    public int updateSnsAccountInfoDynamic(SnsAccountInfo snsAccountInfo) throws Exception {
        return snsAccountInfoMapper.updateSnsAccountInfoDynamic(snsAccountInfo);
    }

    /**
     * 삭제
     */
    @Override
    @Transactional
    public int deleteSnsAccountInfo(SnsAccountInfo snsAccountInfo) throws Exception {
        return snsAccountInfoMapper.deleteSnsAccountInfo(snsAccountInfo);
    }

    /**
    * 사용여부 변경
    */
    @Override
    @Transactional
    public int changeUseYnSnsAccountInfo(SnsAccountInfo snsAccountInfo) throws Exception {
        return snsAccountInfoMapper.changeUseYnSnsAccountInfo(snsAccountInfo);
    }

}
