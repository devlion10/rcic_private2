/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/controller/Controller.e.vm.java
 */
package kr.or.lx.rcic.modules.dataProvdInfo.controller;

import kr.or.lx.rcic.frmwrk.user.User;
import kr.or.lx.rcic.frmwrk.util.CmmnUtil;
import kr.or.lx.rcic.frmwrk.util.SimpleData;
import kr.or.lx.rcic.frmwrk.web.BaseController;
import kr.or.lx.rcic.modules.dataProvdInfo.entity.DataProvdInfo;
import kr.or.lx.rcic.modules.dataProvdInfo.service.DataProvdInfoService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.BadRequestException;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

/**
 *  다운로드할 수 있는 데이터목록을 관리한다.  */
@Controller
@Slf4j
@RequestMapping("/rcic")
public class DataProvdInfoController extends BaseController {

    @Autowired
    private DataProvdInfoService dataProvdInfoService;

    // api

    /**
     * 단건 조회
     */
    @RequestMapping("/apiProvdInfo/getDataProvdInfo/{id}")
    @ResponseBody
    public DataProvdInfo getDataProvdInfo(HttpServletRequest request, 
    		@PathVariable(name = "id", required = true) String id
    		) throws Exception {
    	
    	Map<String, Object> params = new HashMap<String, Object>();
    	params.put("id", id);
        return dataProvdInfoService.getDataProvdInfo(params);
    }

    /**
     * 목록 조회
     */
    @RequestMapping("/dataProvdInfo/getDataProvdInfoList")
    @ResponseBody
    public Map<String, Object> getDataProvdInfoList(HttpServletRequest request) throws Exception {
        return dataProvdInfoService.getDataProvdInfoList(request);
    }

    /**
     * 등록
     */
    @PostMapping("/dataProvdInfo/insertDataProvdInfo")
    @ResponseBody
    public int insertDataProvdInfo(HttpServletRequest request, @RequestBody DataProvdInfo dataProvdInfo) throws Exception {
        return dataProvdInfoService.saveDataProvdInfo(dataProvdInfo);
    }

    /**
     * 수정
     */
    @PostMapping("/dataProvdInfo/updateDataProvdInfo")
    @ResponseBody
    public int updateDataProvdInfo(HttpServletRequest request, @RequestBody DataProvdInfo dataProvdInfo) throws Exception {
        return dataProvdInfoService.saveDataProvdInfo(dataProvdInfo);
    }

    
    /**
     * 동적 수정
     */
    @PostMapping("/dataProvdInfo/patchDataProvdInfo")
    @ResponseBody
    public int patchDataProvdInfo(HttpServletRequest request, @RequestBody DataProvdInfo dataProvdInfo) throws Exception {
        return dataProvdInfoService.saveDataProvdInfo(dataProvdInfo);
    }

    /**
     * 삭제
     */
    @PostMapping("/dataProvdInfo/deleteDataProvdInfo")
    @ResponseBody
    public int deleteDataProvdInfo(HttpServletRequest request, @RequestBody DataProvdInfo dataProvdInfo) throws Exception {
        return dataProvdInfoService.deleteDataProvdInfo(dataProvdInfo);
    }
    
    /**
     * api 파일 다운로드
     * @param fileId
     * @param response
     * @throws Exception
     */
    @RequestMapping("/dataProvdInfo/getDataProvdInfoDownload/{id}")
    public void dataProvdInfoDownload(@PathVariable("id") Long fileId, HttpServletRequest request, HttpServletResponse response) throws Exception {
        Map<String, Object> param = new HashMap<>();
        param.put("id", fileId);
        DataProvdInfo fileInfo = dataProvdInfoService.getDataProvdInfo(param);

        if (fileInfo == null) {
            log.warn("존재하지 않는 파일 정보를 요청하였음. 파일ID: {}", fileId);
            throw new BadRequestException("존재하지 않는 파일ID:" + fileId);
        }

        String filePath = fileInfo.getFilePath();
        if (!filePath.endsWith("/")) filePath += "/";
        String fullFilePath = filePath + fileInfo.getFileName();

        File localFile = new File(fullFilePath);
        if (localFile.exists() == false) {
            throw new RuntimeException("서버에 파일이 존재하지 않습니다.");
        }

        String downloadFileName = fileInfo.getFileName();
        String encodedFileName = new String(downloadFileName.getBytes("UTF-8"), "ISO-8859-1");

        response.setHeader("Content-Disposition", "attachment; filename=\"" + encodedFileName + "\";");
        response.setHeader("Content-Transfer-Encoding", "binary");

        OutputStream out = response.getOutputStream();
        InputStream fis = null;
        try {
            fis = new FileInputStream(localFile);
            FileCopyUtils.copy(fis, out);
        } catch (Exception e) {
        	CmmnUtil.setLog(e.getMessage());
        } finally {
            IOUtils.closeQuietly(fis);
        }

        // log
        SimpleData logData = new SimpleData();
        String clientIp = request.getHeader("X-FORWARDED-FOR");
        if (clientIp == null)
            clientIp = request.getRemoteAddr();
        try {
            User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); //로그인 사용자 정보 조회
            logData.put("userSeq", user.getUserNo());
        } catch (Exception e) {
            logData.put("userSeq", null);
        }
        logData.put("dataProvdNo", String.valueOf(fileId));
        logData.put("clientIp", clientIp);
        dataProvdInfoService.insertDownloadHistory(logData);

        out.flush();
    }

    /**
     * 다운로드 이력 
     */
    @SuppressWarnings("unchecked")
	@PostMapping("/dataProvdInfo/insertDownloadHistory")
    @ResponseBody
    public int insertDownloadHistory(HttpServletRequest request, Authentication auth) throws Exception {
    	
    	SimpleData map = getSimpleData(request);
    	
    	try {
    		User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); //로그인 사용자 정보 조회
    		map.put("userSeq", user.getUserNo());
		} catch (Exception e) {
			map.put("userSeq", null);
		}
 		 String clientIp = request.getHeader("X-FORWARDED-FOR");
 	        if (clientIp == null)
 	        	clientIp = request.getRemoteAddr();
    	  map.put("clientIp", clientIp);
        return dataProvdInfoService.insertDownloadHistory(map);
    }
    

}
