/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/service/impl/ServiceImpl.e.vm.java
 */
package kr.or.lx.rcic.modules.analysisLocHist.service.impl;

import java.awt.AWTException;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.co.timosoft.rcic.search.TimoSolrService;
import kr.co.timosoft.util.PaginationUtil;
import kr.or.lx.rcic.egovframework.cmmn.util.EgovMessageSource;
import kr.or.lx.rcic.frmwrk.user.User;
import kr.or.lx.rcic.frmwrk.util.CmmnUtil;
import kr.or.lx.rcic.frmwrk.util.SimpleData;
import kr.or.lx.rcic.frmwrk.util.SimpleDataUtility;
import kr.or.lx.rcic.modules.analysisInfo.mapper.AnalysisInfoMapper;
import kr.or.lx.rcic.modules.analysisLocHist.entity.AnalysisLocHist;
import kr.or.lx.rcic.modules.analysisLocHist.mapper.AnalysisLocHistMapper;
import kr.or.lx.rcic.modules.analysisLocHist.service.AnalysisLocHistService;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONArray;

/**
 *  도로변경예측정보의 위치수정이력을 관리한다.  */
@Service
@Slf4j
public class AnalysisLocHistServiceImpl implements AnalysisLocHistService {

    @Autowired
    private AnalysisLocHistMapper analysisLocHistMapper;
    
    @Autowired
    private AnalysisInfoMapper analysisInfoMapper;

    @Resource(name = "egovMessageSource")
    EgovMessageSource egovMessageSource;
    
    @Value("#{contextProperties}")
    Properties prop = new Properties();

    /**
     * 단건 조회
     */
    @Override
    public AnalysisLocHist getAnalysisLocHist(Map<String, Object> params) throws Exception {
        log.debug("params: {}", params.toString()); // log 사용
        return analysisLocHistMapper.getAnalysisLocHist(params);
    }

    /**
     * 목록 조회
     */
    @Override
    public Map<String, Object> getAnalysisLocHistList(HttpServletRequest request) throws Exception {

        HashMap<String, Object> resultMap = new HashMap<String, Object>();
        HashMap<String, Object> retMap = new HashMap<String, Object>();
        resultMap.put("message", "success");
        String strParamList = CmmnUtil.deXss(CmmnUtil.checkNull(request.getParameter("paramList"), ""));
        if (strParamList.equals("")) {
            retMap.put("message", "failure");
            retMap.put("result", egovMessageSource.getMessage("_REQUIRED_MSG_REPEAT"));
            return retMap;
        }

        JSONArray paramList = JSONArray.fromObject(strParamList);
        HashMap<String, Object> param = new HashMap<String, Object>();
        param = CmmnUtil.convertJsonToObject(CmmnUtil.checkNull(paramList.getJSONObject(0), ""));

        int listCnt = param.get("listCnt") == null ? 10 : Integer.parseInt(String.valueOf(param.get("listCnt")));
        int currPage = param.get("currPage") == null ? 1 : Integer.parseInt(String.valueOf(param.get("currPage")));

        param.put("listCnt", listCnt);
        param.put("currPage", currPage);

        int cnt = analysisLocHistMapper.selectAnalysisLocHistCnt(param);
        int maxPageCnt = PaginationUtil.maxPageCnt(cnt, listCnt);
        List<Map<String, Object>> list = analysisLocHistMapper.selectAnalysisLocHistList(param);

        resultMap.put("maxPageCnt", maxPageCnt);
        resultMap.put("list", list);

        return resultMap;
    }


    /**
     * 등록
     */
    @Override
    @Transactional
    public int insertAnalysisLocHist(SimpleData simpleData) throws Exception {
    	
    	User user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); //로그인 사용자 정보 조회
    	simpleData.put("registId", user.getUserid());
    	simpleData.put("geom", simpleData.get("geom").toString().replace("& #40;", "(").replace("& #41;",")"));
    	 
    	try {
    		String solrServerUrl = prop.getProperty("solrUrl");
            int seq = Integer.parseInt(String.valueOf(simpleData.get("seq")));
            if(solrServerUrl!=null) {
            	 TimoSolrService solrService = new TimoSolrService(prop.getProperty("solrUrl"));
            	 solrService.updateSolrData(solrServerUrl+"/tb_analysis_info", seq, "3");
            }	
		} catch (Exception e) {
			e.printStackTrace();
		}
    	
    	analysisInfoMapper.updateLocPrdtReliCd(simpleData);
    	return analysisLocHistMapper.insertAnalysisLocHist(simpleData);
    }

    /**
     * 수정
     */
    @Override
    @Transactional
    public int updateAnalysisLocHist(AnalysisLocHist analysisLocHist) throws Exception {
        return analysisLocHistMapper.updateAnalysisLocHist(analysisLocHist);
    }
    
    @Override
    @Transactional
    public int updateChangeLocation(SimpleData simpleData) throws Exception {
    	int result = 0;

    	// 1.DB Update
    	result = analysisLocHistMapper.updateChangeLocation(simpleData);

    	try {
    		// 2.Solr Data Update & Reload
    		SolrClient solr = null; 
    		String solrUrl = prop.getProperty("solrUrl");
    		String solrServerUrls = "tb_analysis_score"; 
    		String solrServerReloadUrl = solrUrl+"/admin"; 
    		int resultno = Integer.parseInt(simpleData.get("resultno").toString());

    		// 2-1.Data Update
    		String solrServerUrl = prop.getProperty("solrUrl");
    		log.debug(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.solrServerUrl:"+ solrServerUrl); 
    		String searchWord = simpleData.get("SearchWord").toString();
    		if (solrServerUrl != null) {
    			updateSolrData(solrServerUrl + "/tb_analysis_score", resultno, searchWord);
    			// http://xxx.xxx.xxx/solr/tb_analysis_score/?q=resultno:922835
    		}

    		// 2-2.Reload
    		log.debug(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.solrReloadUrl:"+ solrServerReloadUrl); 
    		solr = new HttpSolrClient.Builder(solrServerReloadUrl).build(); 
    		ModifiableSolrParams params = new ModifiableSolrParams();
    		params = new ModifiableSolrParams(); 
    		params.set("action", "RELOAD");
    		params.set("qt","/cores"); 
    		params.set("core", solrServerUrls); 
    		solr.query(params); 
    		// http://xxx.xxx.xxx/solr/admin/cores?action=RELOAD&core=tb_analysis_score

    	} catch (Exception e) {
    		e.printStackTrace();
    		result = 0;
    		throw new RuntimeException();
    	}

    	return result;
    }

    

    /**
     * 동적 수정
     */
    @Override
    @Transactional
    public int updateAnalysisLocHistDynamic(AnalysisLocHist analysisLocHist) throws Exception {
        return analysisLocHistMapper.updateAnalysisLocHistDynamic(analysisLocHist);
    }

    /**
     * 삭제
     */
    @Override
    @Transactional
    public int deleteAnalysisLocHist(AnalysisLocHist analysisLocHist) throws Exception {
        return analysisLocHistMapper.deleteAnalysisLocHist(analysisLocHist);
    }
    
    
	/**
	 * solr_한 개의 레코드의 특정 필드 값을 업데이트
	 */
	public SolrDocumentList updateSolrData(String solrServerUrl, int resultno, String analysisword) throws SolrServerException, AWTException, IOException, InterruptedException {

		SolrClient solr = null;
		SolrDocumentList docList =null;

		try {
			solr = new HttpSolrClient.Builder(solrServerUrl).build();
			ModifiableSolrParams params = new ModifiableSolrParams();
			params.set("q", "resultno:"+resultno);
			QueryResponse response = solr.query(params);
			
			docList = response.getResults();
			
			SolrInputDocument document = new SolrInputDocument();
			
			for(SolrDocument doc : docList) {
				Collection<String> fieldNames = doc.getFieldNames();
				for (String name : fieldNames) {
					if(name.equals("analysisword")) {
						document.addField(name, analysisword);
					}else {
						document.addField(name, doc.getFieldValue(name));	
					}
				}
			}

			solr.add(document);
			solr.commit();
		} catch (Exception e) {
			e.printStackTrace();
			solr.close();
		}finally {
			if(solr!=null) {
				solr.close();
			}
		}
		return docList;
	}

	@Override
	public String getChnage_yn(String resultno) throws Exception {
		// TODO Auto-generated method stub
		return analysisLocHistMapper.getChnage_yn(resultno);
	}
    
    

}
