/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/service/impl/ServiceImpl.e.vm.java
 */
package kr.or.lx.rcic.modules.dataapi.service.impl;

import kr.co.timosoft.util.PaginationUtil;
import kr.or.lx.rcic.egovframework.cmmn.util.EgovMessageSource;
import kr.or.lx.rcic.frmwrk.user.SecurityUtil;
import kr.or.lx.rcic.modules.dataapi.entity.ApiBlockInfo;
import kr.or.lx.rcic.modules.dataapi.entity.ApiUser;
import kr.or.lx.rcic.modules.dataapi.mapper.ApiBlockInfoMapper;
import kr.or.lx.rcic.modules.dataapi.service.ApiBlockInfoService;
import kr.or.lx.rcic.modules.dataapi.service.ApiUserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *  API 사용자의 차단정보를 관리한다.  */
@Service
@Slf4j
public class ApiBlockInfoServiceImpl implements ApiBlockInfoService {

    @Autowired
    private ApiBlockInfoMapper apiBlockInfoMapper;

    @Autowired
    private ApiUserService apiUserService;

    @Resource(name = "egovMessageSource")
    EgovMessageSource egovMessageSource;

    /**
     * 단건 조회
     */
    @Override
    public ApiBlockInfo getApiBlockInfo(Map<String, Object> params) throws Exception {
        return apiBlockInfoMapper.getApiBlockInfo(params);
    }

    /**
     * 목록 조회
     */
    @Override
    public Map<String, Object> getApiBlockInfoList(Map<String, Object> param) throws Exception {

        HashMap<String, Object> resultMap = new HashMap<String, Object>();

        int cnt = apiBlockInfoMapper.selectApiBlockInfoCnt(param);
        List<Map<String, Object>> list = apiBlockInfoMapper.selectApiBlockInfoList(param);

        int listCnt =  Integer.valueOf((String)param.get("listCnt"));
        int maxPageCnt = PaginationUtil.maxPageCnt(cnt, listCnt);
        resultMap.put("maxPageCnt", maxPageCnt);
        resultMap.put("list", list);
        resultMap.put("totalCnt", cnt);

        return resultMap;
    }

    /**
     * 저장
     */
    @Override
    @Transactional
    public int saveApiBlockInfo(ApiBlockInfo apiBlockInfo) throws Exception {

        // 저장 권한 검사 등..

        if (apiBlockInfo.hasPk()) {
            // 수정
            return updateApiBlockInfo(apiBlockInfo);
        } else {
            // 신규 등록
            return insertApiBlockInfo(apiBlockInfo);
        }
    }

    /**
     * 등록
     */
    @Override
    @Transactional
    public int insertApiBlockInfo(ApiBlockInfo apiBlockInfo) throws Exception {
        apiBlockInfo.setRegistId(SecurityUtil.getCurrentUserId());

        ApiUser apiUser = new ApiUser();
        apiUser.setId(apiBlockInfo.getApiUserNo());
        apiUser.setBlockAt("Y");
        apiUserService.updateApiUserDynamic(apiUser);

        return apiBlockInfoMapper.insertApiBlockInfo(apiBlockInfo);
    }

    /**
     * 수정
     */
    @Override
    @Transactional
    public int updateApiBlockInfo(ApiBlockInfo apiBlockInfo) throws Exception {
        updateApiUserBlockFlag(apiBlockInfo);
        return apiBlockInfoMapper.updateApiBlockInfo(apiBlockInfo);
    }

    /**
     * 동적 수정
     */
    @Override
    @Transactional
    public int updateApiBlockInfoDynamic(ApiBlockInfo apiBlockInfo) throws Exception {
        updateApiUserBlockFlag(apiBlockInfo);
        return apiBlockInfoMapper.updateApiBlockInfoDynamic(apiBlockInfo);
    }

    /**
     * 삭제
     */
    @Override
    @Transactional
    public int deleteApiBlockInfo(ApiBlockInfo apiBlockInfo) throws Exception {
        return apiBlockInfoMapper.deleteApiBlockInfo(apiBlockInfo);
    }

    private int updateApiUserBlockFlag(ApiBlockInfo arg) throws Exception {
        String blockAt = "1".equals(arg.getBlockSe()) ? "Y" : "N";

        Map p = new HashMap();
        p.put("id", arg.getId());
        ApiBlockInfo apiBlockInfo = getApiBlockInfo(p);

        ApiUser apiUser = new ApiUser();
        apiUser.setId(apiBlockInfo.getApiUserNo());
        apiUser.setBlockAt(blockAt);
        return apiUserService.updateApiUserDynamic(apiUser);
    }

}
