/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/controller/Controller.e.vm.java
 */
package kr.or.lx.rcic.modules.analysisLocHist.controller;

import java.awt.AWTException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.co.timosoft.rcic.search.TimoSolrService;
import kr.co.timosoft.util.DateUtil;
import kr.or.lx.rcic.frmwrk.util.SimpleData;
import kr.or.lx.rcic.frmwrk.util.SimpleDataUtility;
import kr.or.lx.rcic.frmwrk.web.BaseController;
import kr.or.lx.rcic.modules.analysisLocHist.entity.AnalysisLocHist;
import kr.or.lx.rcic.modules.analysisLocHist.service.AnalysisLocHistService;

import lombok.extern.slf4j.Slf4j;

/**
 * 도로변경예측정보의 위치수정이력을 관리한다.
 */
@Controller
@Slf4j
@RequestMapping("/rcic")
public class AnalysisLocHistController extends BaseController {

	@Autowired
	private AnalysisLocHistService analysisLocHistService;

	@Value("#{contextProperties}")
	Properties prop = new Properties();

	// api

	/**
	 * 단건 조회
	 */
	@RequestMapping("/analysisLocHist/getAnalysisLocHist")
	@ResponseBody
	public AnalysisLocHist getAnalysisLocHist(HttpServletRequest request, @RequestParam Map params) throws Exception {
		SimpleData simpleData = getSimpleData(request);
		log.debug("simpleData: {}", simpleData);
		return analysisLocHistService.getAnalysisLocHist(simpleData);
	}

	/**
	 * 목록 조회
	 */
	@RequestMapping("/analysisLocHist/getAnalysisLocHistList")
	@ResponseBody
	public Map<String, Object> getAnalysisLocHistList(HttpServletRequest request) throws Exception {
		return analysisLocHistService.getAnalysisLocHistList(request);
	}

	/**
	 * 등록
	 */
	@PostMapping("/analysisLocHist/insertAnalysisLocHist")
	@ResponseBody
	public int insertAnalysisLocHist(HttpServletRequest request) throws Exception {
		// 1.DB Update(tb_analysis_score) & Solr Data Update & Reload
		int p = analysisLocHistService.updateChangeLocation(getSimpleData(request));
		
		if(p==0) { // 1번 실패시
			return 0;
		}else{ // 2.위치정보 변경이력 관련
			return analysisLocHistService.insertAnalysisLocHist(getSimpleData(request));
		}
	}

	/**
	 * 수정
	 */
	@PostMapping("/analysisLocHist/updateAnalysisLocHist")
	@ResponseBody
	public int updateAnalysisLocHist(HttpServletRequest request, @RequestBody AnalysisLocHist analysisLocHist)
			throws Exception {
		return analysisLocHistService.updateAnalysisLocHist(analysisLocHist);
	}

	/**
	 * 삭제
	 */
	@PostMapping("/analysisLocHist/deleteAnalysisLocHist")
	@ResponseBody
	public int deleteAnalysisLocHist(HttpServletRequest request, @RequestBody AnalysisLocHist analysisLocHist)
			throws Exception {
		return analysisLocHistService.deleteAnalysisLocHist(analysisLocHist);
	}
	
}
