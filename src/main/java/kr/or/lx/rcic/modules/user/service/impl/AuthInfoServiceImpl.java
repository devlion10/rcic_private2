/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-rcic:src/main/java/service/impl/ServiceImpl.e.vm.java
 */
package kr.or.lx.rcic.modules.user.service.impl;

import kr.co.timosoft.util.PaginationUtil;
import kr.or.lx.rcic.egovframework.cmmn.util.EgovMessageSource;
import kr.or.lx.rcic.frmwrk.util.WebUtil;
import kr.or.lx.rcic.modules.user.entity.AuthInfo;
import kr.or.lx.rcic.modules.user.mapper.AuthInfoMapper;
import kr.or.lx.rcic.modules.user.service.AuthInfoService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *  권한코드 정보를 관리한다.  */
@Service
@Slf4j
public class AuthInfoServiceImpl implements AuthInfoService {

    @Autowired
    private AuthInfoMapper authInfoMapper;

    @Resource(name = "egovMessageSource")
    EgovMessageSource egovMessageSource;

    /**
     * 단건 조회
     */
    @Override
    public AuthInfo getAuthInfo(Map<String, Object> params) throws Exception {
        return authInfoMapper.getAuthInfo(params);
    }

    /**
     * 목록 조회
     */
    @Override
    public Map<String, Object> getAuthInfoList(HttpServletRequest request) throws Exception {

        Map<String, Object> resultMap = new HashMap<>();
        Map<String, Object> param = WebUtil.getCommonAjaxParam();

        int listCnt = (int) param.get("listCnt");
        int currPage = (int) param.get("currPage");

        param.put("listCnt", listCnt);
        param.put("currPage", currPage);

        int cnt = authInfoMapper.selectAuthInfoCnt(param);
        int maxPageCnt = PaginationUtil.maxPageCnt(cnt, listCnt);
        List<Map<String, Object>> list = authInfoMapper.selectAuthInfoList(param);

        resultMap.put("totalCnt", cnt);
        resultMap.put("maxPageCnt", maxPageCnt);
        resultMap.put("list", list);

        return resultMap;
    }

    @Override
    public Map<String, Object> getAuthInfoListAll() {
        Map<String, Object> param = new HashMap<>();
        param.put("skipPaging", "true");

        List<Map<String, Object>> list = authInfoMapper.selectAuthInfoList(param);

        Map<String, Object> resultMap = new HashMap<>();
        resultMap.put("list", list);

        return resultMap;
    }

    /**
     * 저장
     */
    @Override
    @Transactional
    public int saveAuthInfo(AuthInfo authInfo) throws Exception {

        // 저장 권한 검사 등..

        if (authInfo.hasPk()) {
            // 수정
            return updateAuthInfo(authInfo);
        } else {
            // 신규 등록
            return insertAuthInfo(authInfo);
        }
    }

    /**
     * 등록
     */
    @Override
    @Transactional
    public int insertAuthInfo(AuthInfo authInfo) throws Exception {
        boolean isExist = existAuthNm(authInfo.getAuthNm());
        if (isExist) {
            return -1;
        } else {
            return authInfoMapper.insertAuthInfo(authInfo);
        }
    }

    /**
     * 수정
     */
    @Override
    @Transactional
    public int updateAuthInfo(AuthInfo authInfo) throws Exception {
        return authInfoMapper.updateAuthInfo(authInfo);
    }

    /**
     * 동적 수정
     */
    @Override
    @Transactional
    public int updateAuthInfoDynamic(AuthInfo authInfo) throws Exception {
        boolean isExist = existAuthNm(authInfo.getAuthNm());
        if (isExist) {
            return -1;
        } else {
            return authInfoMapper.updateAuthInfoDynamic(authInfo);
        }
    }

    /**
     * 삭제
     */
    @Override
    @Transactional
    public int deleteAuthInfo(AuthInfo authInfo) throws Exception {
        return authInfoMapper.deleteAuthInfo(authInfo);
    }

    @Override
    public boolean existAuthNm(String authNm) {
        return authInfoMapper.existAuthNm(authNm);
    }

}
